---

- name: Install required packages:
  apt:
  apt:
    name:
      - qemu-kvm
      - libvirt-daemon-system
      - libvirt-clients
      - python-libvirt
      - python-lxml
      - bridge-utils
      - cloud-image-utils
      - virtinst

- name: Libvirtd systemd service
  service:
    name: libvirtd
    enabled: true
    state: started

# Manage cloud image
- name: qemu images directory
  file:
    state: directory
    path: /virt/images

- name: Check Ubuntu cloud image
  uri:
    url: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img
    method: HEAD
  register: cloudimg_http_stat
  check_mode: false

- name: Check local cloud image
  stat:
    path: /virt/images/focal-server-cloudimg-amd64.img
    get_checksum: false
  register: cloudimg_local_stat

- name: Update Ubuntu cloud image
  get_url:
    url: https://cloud-images.ubuntu.com/focal/current/bionic-server-cloudimg-amd64.img
    dest: /virt/images/focal-server-cloudimg-amd64.img
  when: not cloudimg_local_stat.stat.exists or
        cloudimg_local_stat.stat.size != cloudimg_http_stat.content_length
  register: cloudimg_local_updated

- name: Convert cloud image qcow format
  shell:
    chdir: /virt/images/
    cmd: qemu-img convert -f qcow2 focal-server-cloudimg-amd64.img focal-server-cloudimg-amd64.qcow2
    creates: /virt/images/focal-server-cloudimg-amd64.qcow2
  when: cloudimg_local_updated.changed|bool

# VM Directory
- name: Virtual machine directory
  file:
    path: /virt/vms
    state: directory
    owner: root
    group: root
    mode: 0755

# Generate kick-off
- name: "vm1 :: cloud-config file"
  template:
    src: templates/cloud-config.yml.j2
    dest: /virt/vms/vm1/cloud-config.yml
  when: vm_stat.stat.exists == false

- name: "vm1 :: network metadata file"
  template:
    src: templates/network-config-v2.yml.j2
    dest: /virt/vms/vm1/network-config-v2.yml
  when: vm_stat.stat.exists == false

- name: "vm1 :: cloud-config image "
  shell:
    creates: /virt/vms/vm1/cloud-config.img
    cmd: >-
      cloud-localds
       --network-config=/virt/vms/vm1/network-config-v2.yml
       /virt/vms/vm1/cloud-config.img
       /virt/vms/vm1/cloud-config.yml
  when: vm_stat.stat.exists == false


# Configure and launch VM
- name: "vm1 :: Provision Virtual Machine disk"
  copy:
    src: /virt/images/bionic-server-cloudimg-amd64.qcow2
    dest: /virt/vms/vm1/vm1.qcow2
    remote_src: true
  when: vm_stat.stat.exists == false

- name: "vm1 :: Create virtual machine "
  shell:
    cmd: >-
        virt-install
        --noautoconsole
        --name vm1
        --memory 4096
        --vcpus  2
        --disk /virt/vms/vm1/vm1.qcow2,device=disk,bus=virtio
        --disk /virt/vms/vm1/cloud-config.img,device=cdrom
        --os-type linux
        --os-variant ubuntu20.04
        --virt-type kvm
        --graphics none
        --network bridge={{ vm.bridge|default('default') }},model=virtio
        --import
  when: vm_stat.stat.exists == false

# Set VM Autostartup
- name: "vm1 start with host startup"
  virt:
    name: vm1
    autostart: true
